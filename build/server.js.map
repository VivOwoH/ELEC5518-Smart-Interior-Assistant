{
  "version": 3,
  "sources": ["../src/server.ts"],
  "sourcesContent": ["import express, { Request, Response } from \"express\";\r\nimport Replicate from \"replicate\";\r\nimport cors from 'cors';\r\nimport path from 'path';\r\nimport fs from 'fs'\r\n\r\nconst replicate = new Replicate({\r\n    auth: \"r8_UyH7brBt35yeoQNXjiOt7D2D8QDQXPY0j9bHu\",\r\n});\r\n\r\nconst model =\r\n    \"stability-ai/stable-diffusion:db21e45d3f7023abc2a46ee38a23973f6dce16bb082a930b0c49861f96d1e5bf\";\r\nconst input = {\r\n    prompt:\r\n        \"I need a small room with 21 degrees of light, 34 ultrasonic, 45 temperture and 56 humidity\",\r\n};\r\n\r\nconst app = express();\r\napp.use(express.json());\r\napp.use('/public', express.static('public'));\r\n\r\n// Define the CORS options\r\nconst corsOptions = {\r\n    credentials: true,\r\n    origin: ['http://localhost:3000', 'http://localhost:8080'] // Whitelist the domains you want to allow\r\n};\r\napp.use(cors(corsOptions)); // Use the cors middleware with your options\r\n\r\n// Replicate request\r\napp.get(\"/request\", async (req: Request, res: Response): Promise<void> => {\r\n    try {\r\n        const result = await replicate.run(model, { input });\r\n        // Send the response back to the client\r\n        res.json({ message: 'Image generated at URL:', result });\r\n    } catch (error) {\r\n        console.error(error);\r\n        res.status(500).json({ error: 'Internal Server Error' });\r\n    }\r\n});\r\n\r\napp.get('/', (_, res) => {\r\n    res.sendFile(path.resolve('./public/index.html'));\r\n  });\r\n\r\nconst start = async (): Promise<void> => {\r\n    try {\r\n        app.listen(3000, () => {\r\n            console.log(\"Server started on port 3000\");\r\n        });\r\n    } catch (error) {\r\n        console.error(error);\r\n        process.exit(1);\r\n    }\r\n\r\n};\r\n\r\nvoid start();"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA,qBAA2C;AAC3C,uBAAsB;AACtB,kBAAiB;AACjB,kBAAiB;AAGjB,MAAM,YAAY,IAAI,iBAAAA,QAAU;AAAA,EAC5B,MAAM;AACV,CAAC;AAED,MAAM,QACF;AACJ,MAAM,QAAQ;AAAA,EACV,QACI;AACR;AAEA,MAAM,UAAM,eAAAC,SAAQ;AACpB,IAAI,IAAI,eAAAA,QAAQ,KAAK,CAAC;AACtB,IAAI,IAAI,WAAW,eAAAA,QAAQ,OAAO,QAAQ,CAAC;AAG3C,MAAM,cAAc;AAAA,EAChB,aAAa;AAAA,EACb,QAAQ,CAAC,yBAAyB,uBAAuB;AAAA;AAC7D;AACA,IAAI,QAAI,YAAAC,SAAK,WAAW,CAAC;AAGzB,IAAI,IAAI,YAAY,OAAO,KAAc,QAAiC;AACtE,MAAI;AACA,UAAM,SAAS,MAAM,UAAU,IAAI,OAAO,EAAE,MAAM,CAAC;AAEnD,QAAI,KAAK,EAAE,SAAS,2BAA2B,OAAO,CAAC;AAAA,EAC3D,SAAS,OAAO;AACZ,YAAQ,MAAM,KAAK;AACnB,QAAI,OAAO,GAAG,EAAE,KAAK,EAAE,OAAO,wBAAwB,CAAC;AAAA,EAC3D;AACJ,CAAC;AAED,IAAI,IAAI,KAAK,CAAC,GAAG,QAAQ;AACrB,MAAI,SAAS,YAAAC,QAAK,QAAQ,qBAAqB,CAAC;AAClD,CAAC;AAEH,MAAM,QAAQ,YAA2B;AACrC,MAAI;AACA,QAAI,OAAO,KAAM,MAAM;AACnB,cAAQ,IAAI,6BAA6B;AAAA,IAC7C,CAAC;AAAA,EACL,SAAS,OAAO;AACZ,YAAQ,MAAM,KAAK;AACnB,YAAQ,KAAK,CAAC;AAAA,EAClB;AAEJ;AAEA,KAAK,MAAM;",
  "names": ["Replicate", "express", "cors", "path"]
}
