{
  "version": 3,
  "sources": ["../server.ts"],
  "sourcesContent": ["import express, { Request, Response } from \"express\";\r\nimport axios from \"axios\";\r\nimport { createObjectCsvWriter } from \"csv-writer\";\r\nimport Replicate from \"replicate\";\r\nimport cors from 'cors';\r\nimport path from 'path';\r\n\r\nconst replicate = new Replicate({\r\n    auth: \"r8_DbLLQW3PyidLx9phoExbqwC5xwzTUSZ3gsyfv\",\r\n});\r\n\r\nconst model =\r\n    \"stability-ai/stable-diffusion:db21e45d3f7023abc2a46ee38a23973f6dce16bb082a930b0c49861f96d1e5bf\";\r\nconst input = {\r\n    prompt:\r\n        \"I need a small room with 21 degrees of light, 34 ultrasonic, 45 temperture and 56 humidity\",\r\n};\r\n\r\n// thingspeak\r\nconst thingspeakAPI = axios.create({\r\n    baseURL: \"https://api.thingspeak.com\",\r\n});\r\n\r\nconst channelID = '2549941';\r\nconst readApiKey = '2DWC40ZT6TVFVB67';\r\n\r\n// Adafruit IO\r\nconst username = \"vivianH\";\r\nconst feedKey = 'image-stream';\r\nconst adafruitIOAPI = axios.create({\r\n    baseURL: \"https://io.adafruit.com/api/v2\",\r\n    headers: {\r\n        'X-AIO-Key': \"aio_cAcE97DnmfhfSE1wtk60dbttr069\",\r\n    }\r\n});\r\n\r\nconst app = express();\r\napp.use(express.json());\r\napp.use('/public', express.static('public'));\r\n\r\n// Define the CORS options\r\nconst corsOptions = {\r\n    credentials: true,\r\n    origin: ['http://localhost:3000', 'http://localhost:8080'] // Whitelist the domains you want to allow\r\n};\r\napp.use(cors(corsOptions)); // Use the cors middleware with your options\r\n\r\n// Replicate request\r\napp.get(\"/request\", async (req: Request, res: Response): Promise<void> => {\r\n    try {\r\n        const result = await replicate.run(model, { input });\r\n        // Send the response back to the client\r\n        res.json({ message: 'Image generated at URL:', result });\r\n    } catch (error) {\r\n        console.error(error);\r\n        res.status(500).json({ error: 'Internal Server Error' });\r\n    }\r\n});\r\n\r\n\r\nconst fetchDataFromThingSpeak = async (): Promise<any> => {\r\n    try {\r\n        const response = await thingspeakAPI.get(`/channels/${channelID}/feeds.json?api_key=${readApiKey}`);\r\n        return response.data.feeds;\r\n    } catch (error) {\r\n        throw new Error(\"Failed to fetch data from ThingSpeak\");\r\n    }\r\n};\r\n\r\nconst saveDataToCSV = (data: any[], filePath: string): void => {\r\n    const csvWriter = createObjectCsvWriter({\r\n        path: filePath,\r\n        header: [\r\n            { id: \"created_at\", title: \"Timestamp\" },\r\n            { id: \"field1\", title: \"Distance\" },\r\n            { id: \"field2\", title: \"Humidity\" }, \r\n            { id: \"field3\", title: \"Temperature\" }, \r\n            { id: \"field4\", title: \"Light\" }, \r\n        ],\r\n    });\r\n    csvWriter.writeRecords(data)\r\n        .then(() => console.log(\"Saved to CSV\"))\r\n        .catch((error: any) => console.error(\"Failed to save to CSV:\", error));\r\n};\r\n\r\n\r\napp.get(\"/fetch\", async (req: Request, res: Response): Promise<void> => {\r\n    try {\r\n        const data = await fetchDataFromThingSpeak();\r\n        const filePath = path.join(__dirname, \"data.csv\");\r\n        saveDataToCSV(data, filePath);\r\n        res.json({ message: \"Data fetched and saved to CSV\", data});\r\n    } catch (error) {\r\n        console.error(error);\r\n        res.status(500).json({ error: \"Failed to fetch and save data\" });\r\n    }\r\n});\r\n\r\napp.get(\"/fetch-image-feed\", async (req: Request, res: Response): Promise<void> => {\r\n    try {\r\n        const response = await adafruitIOAPI.get(`/${username}/feeds/${feedKey}/data`);\r\n        res.json({ message: \"Fetched image feed data\", data: response.data });\r\n    } catch (error) {\r\n        console.error(error);\r\n        res.status(500).json({ error: \"Failed to fetch image feed data\" });\r\n    }\r\n});\r\n\r\n\r\napp.get('/', (_, res) => {\r\n    res.sendFile(path.resolve('./public/index.html'));\r\n  });\r\n\r\nconst start = async (): Promise<void> => {\r\n    try {\r\n        app.listen(3000, () => {\r\n            console.log(\"Server started on port 3000\");\r\n        });\r\n    } catch (error) {\r\n        console.error(error);\r\n        process.exit(1);\r\n    }\r\n};\r\n\r\nvoid start();"],
  "mappings": "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",
  "names": ["Replicate", "axios", "express", "cors", "path"]
}
